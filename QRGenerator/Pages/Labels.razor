@page "/Labels"
@using System.Reflection
@using QRGenerator.Pages
<h2>Labels</h2>

<div class="user-input">
    <input class="input" id="product-name" placeholder="Product Name" 
           @oninput="e => UpdateInput(e, nameof(productName))" />
    
    <input class="input" id="product-tpn" placeholder="Product TPN" 
           @oninput="e => UpdateInput(e, nameof(productTPN))" />
    
    <input class="input" id="product-ean" placeholder="Product EAN" 
           @oninput="e => UpdateInput(e, nameof(productEAN))" />
    
    <input class="input" id="product-price" placeholder="Product Price" 
           @oninput="e => UpdateInput(e, nameof(productPrice))" />
    
    <button class="add-label" @onclick="AddLabel">Add Label</button>
</div>

<div class="output">
    <div class="label-container">
        @if (_products.Any())
        {
            @foreach (var product in _products)
            {
                <div class="label">
                    <h2 class="productName">@product.productName</h2>
                    <h2 class="productPrice">@product.productPrice</h2>
                    <h2>@product.labelBarcode</h2>
                </div>
            }
        }
    </div>
</div>

@code {

    // Input bindings
    private string productName =    string.Empty;

    private string productTPN =     string.Empty;

    private string productEAN =     string.Empty;

    private string productPrice =   string.Empty;

    // List for storing each product inputted. Will have a max size of 10.
    private static List<Product> _products = new();

    private void UpdateInput(ChangeEventArgs e, string fieldName)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        switch (fieldName)
        {
            case nameof(productName):   productName     = value; break;
            case nameof(productTPN):    productTPN      = value; break;
            case nameof(productEAN):    productEAN      = value; break;
            case nameof(productPrice):  productPrice    = value; break;    
        }
    }
    
    

    private void AddLabel()
    {
        
        Console.WriteLine(productName);
        Console.WriteLine(productTPN);
        Console.WriteLine(productEAN);
        Console.WriteLine(productPrice);
        
        if (_products.Count < 10)
        {
            // Create new product and add it to the list
            Product product = new Product(productName.Trim(), productTPN.Trim(), 
                productEAN.Trim(), productPrice.Trim());
            
            Console.WriteLine($"Product Name: {product.productName}");
            Console.WriteLine($"Product TPN: {product.productTPN}");
            Console.WriteLine($"Product EAN: {product.productEAN}");
            Console.WriteLine($"Label Barcode: {product.labelBarcode}");
            Console.WriteLine($"Product Price: {product.productPrice}");
            
            // Add product to the list
            _products.Add(product);
            
            // Clear user input fields
            productName     = string.Empty;
            productTPN      = string.Empty;
            productEAN      = string.Empty;
            productPrice    = string.Empty;
        }
    }

}